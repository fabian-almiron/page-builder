/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  integer,
  varchar,
  timestamp,
  numeric,
  boolean,
  jsonb,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_users_role = pgEnum('enum_users_role', ['admin', 'client'])
export const enum_sites_status = pgEnum('enum_sites_status', ['draft', 'preview', 'live'])
export const enum_blocks_type = pgEnum('enum_blocks_type', [
  'hero',
  'text',
  'image',
  'gallery',
  'video',
  'form',
  'cta',
  'testimonial',
  'pricing',
  'faq',
])

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    role: enum_users_role('role').notNull().default('client'),
    assignedSite: integer('assigned_site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    firstName: varchar('first_name'),
    lastName: varchar('last_name'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_assigned_site_idx: index('users_assigned_site_idx').on(columns.assignedSite),
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const sites = pgTable(
  'sites',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    logo: integer('logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    primaryColor: varchar('primary_color').default('#3B82F6'),
    domain: varchar('domain'),
    status: enum_sites_status('status').notNull().default('draft'),
    previewUrl: varchar('preview_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    sites_logo_idx: index('sites_logo_idx').on(columns.logo),
    sites_updated_at_idx: index('sites_updated_at_idx').on(columns.updatedAt),
    sites_created_at_idx: index('sites_created_at_idx').on(columns.createdAt),
  }),
)

export const pages_blocks = pgTable(
  'pages_blocks',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    block: integer('block_id')
      .notNull()
      .references(() => blocks.id, {
        onDelete: 'set null',
      }),
    order: numeric('order').default('0'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_parent_id_idx').on(columns._parentID),
    pages_blocks_block_idx: index('pages_blocks_block_idx').on(columns.block),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug').notNull(),
    site: integer('site_id')
      .notNull()
      .references(() => sites.id, {
        onDelete: 'set null',
      }),
    metaTitle: varchar('meta_title'),
    metaDescription: varchar('meta_description'),
    published: boolean('published').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    pages_slug_idx: uniqueIndex('pages_slug_idx').on(columns.slug),
    pages_site_idx: index('pages_site_idx').on(columns.site),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
  }),
)

export const blocks = pgTable(
  'blocks',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    type: enum_blocks_type('type').notNull(),
    config: jsonb('config'),
    description: varchar('description'),
    active: boolean('active').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    blocks_updated_at_idx: index('blocks_updated_at_idx').on(columns.updatedAt),
    blocks_created_at_idx: index('blocks_created_at_idx').on(columns.createdAt),
  }),
)

export const clients = pgTable(
  'clients',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    email: varchar('email').notNull(),
    site: integer('site_id')
      .notNull()
      .references(() => sites.id, {
        onDelete: 'set null',
      }),
    phone: varchar('phone'),
    company: varchar('company'),
    notes: varchar('notes'),
    active: boolean('active').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    clients_email_idx: uniqueIndex('clients_email_idx').on(columns.email),
    clients_site_idx: index('clients_site_idx').on(columns.site),
    clients_updated_at_idx: index('clients_updated_at_idx').on(columns.updatedAt),
    clients_created_at_idx: index('clients_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    sitesID: integer('sites_id'),
    pagesID: integer('pages_id'),
    blocksID: integer('blocks_id'),
    clientsID: integer('clients_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_sites_id_idx: index(
      'payload_locked_documents_rels_sites_id_idx',
    ).on(columns.sitesID),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_blocks_id_idx: index(
      'payload_locked_documents_rels_blocks_id_idx',
    ).on(columns.blocksID),
    payload_locked_documents_rels_clients_id_idx: index(
      'payload_locked_documents_rels_clients_id_idx',
    ).on(columns.clientsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    sitesIdFk: foreignKey({
      columns: [columns['sitesID']],
      foreignColumns: [sites.id],
      name: 'payload_locked_documents_rels_sites_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    blocksIdFk: foreignKey({
      columns: [columns['blocksID']],
      foreignColumns: [blocks.id],
      name: 'payload_locked_documents_rels_blocks_fk',
    }).onDelete('cascade'),
    clientsIdFk: foreignKey({
      columns: [columns['clientsID']],
      foreignColumns: [clients.id],
      name: 'payload_locked_documents_rels_clients_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users = relations(users, ({ one }) => ({
  assignedSite: one(sites, {
    fields: [users.assignedSite],
    references: [sites.id],
    relationName: 'assignedSite',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_sites = relations(sites, ({ one }) => ({
  logo: one(media, {
    fields: [sites.logo],
    references: [media.id],
    relationName: 'logo',
  }),
}))
export const relations_pages_blocks = relations(pages_blocks, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks._parentID],
    references: [pages.id],
    relationName: 'blocks',
  }),
  block: one(blocks, {
    fields: [pages_blocks.block],
    references: [blocks.id],
    relationName: 'block',
  }),
}))
export const relations_pages = relations(pages, ({ one, many }) => ({
  site: one(sites, {
    fields: [pages.site],
    references: [sites.id],
    relationName: 'site',
  }),
  blocks: many(pages_blocks, {
    relationName: 'blocks',
  }),
}))
export const relations_blocks = relations(blocks, () => ({}))
export const relations_clients = relations(clients, ({ one }) => ({
  site: one(sites, {
    fields: [clients.site],
    references: [sites.id],
    relationName: 'site',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    sitesID: one(sites, {
      fields: [payload_locked_documents_rels.sitesID],
      references: [sites.id],
      relationName: 'sites',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    blocksID: one(blocks, {
      fields: [payload_locked_documents_rels.blocksID],
      references: [blocks.id],
      relationName: 'blocks',
    }),
    clientsID: one(clients, {
      fields: [payload_locked_documents_rels.clientsID],
      references: [clients.id],
      relationName: 'clients',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  enum_users_role: typeof enum_users_role
  enum_sites_status: typeof enum_sites_status
  enum_blocks_type: typeof enum_blocks_type
  users: typeof users
  media: typeof media
  sites: typeof sites
  pages_blocks: typeof pages_blocks
  pages: typeof pages
  blocks: typeof blocks
  clients: typeof clients
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_sites: typeof relations_sites
  relations_pages_blocks: typeof relations_pages_blocks
  relations_pages: typeof relations_pages
  relations_blocks: typeof relations_blocks
  relations_clients: typeof relations_clients
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
